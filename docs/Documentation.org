#+TITLE: OTH Exporter Documentation Overview
#+OPTIONS: toc:nil

#+BEGIN_COMMENT
This file is the base from which to generate the Documentation.md file.

Its done like this, too keep all documentation source within the same document.

The readme can be generated by running:

org-export-dispatch->Export to Markdown -> To file

It can also be triggered from the shell by $ make documentation
#+END_COMMENT

#+begin_quote
This document is generated from =Documentation.org=.

Use the =documentation= Make target to generate it.
#+end_quote

* Introduction
This document aims to provide the documentation for the OTH =exporter=.

* Exporter Functional Overview
The =exporter='s main responsibility is to export measurements stored in an OTH installation to an external system. The exporter has the following main responsibilities:
- Keep a record denoting if an OTH measurement has been exported or not.
- Support handling backend failures in a robust fashion
- Map an OTH measurement from OTH API format to a specific backend format.

The current supported backends are:
- KIH database
- KIH XDS Repository

In order to provide an understanding of the functionality the sequence diagram below outlines how the exporter functions.

#+begin_src plantuml :file images/exporter-overview.png :exports results
title Exporter Overview
hide footbox

participant Script

box "Exporter Service"
participant Exporter
participant ExporterBackend
end box

participant OTH
participant External

Script->Exporter: HTTP GET /export
activate Exporter
Exporter->OTH: GET /clinician/api/measurements&since=<lastrun time>
activate OTH
return  List of measurements

loop for measurement in measurements
activate Exporter
Exporter->ExporterBackend: Check If Measurement Should be exported?
activate ExporterBackend
return True/False

Exporter->OTH: Get Citizen Data
activate OTH
note over OTH: Caches citizen data in to avoid multiple lookups
returnCitizen data
deactivate OTH
Exporter->ExporterBackend: Convert Measurement To Backend Format
activate ExporterBackend
return  Converted Measurement As String

Exporter->External: Export Measurment
activate External
return  Measurement Exported
Exporter->Exporter: Mark Measurement as exported
end
deactivate Exporter
deactivate Exporter
Exporter-->Script: Returns results
#+end_src

#+RESULTS:
[[file:images/exporter-overview.png]]

The =ConvertMeasurement= and =ExportMeasurement= can be as simple or complex as required. They can also invoke other service to help perform the task at hand. It all depends on the backend and it's requirements.

* Exporter HTTP endpoints

The exporter has the following endpoints:
#+BEGIN_SRC http :pretty :exports both
GET http://localhost:8360
#+END_SRC

#+RESULTS:
#+begin_example
{
  "apiVersion": "1.2.0_build1",
  "environment": "prod",
  "links": {
    "measurement": "http://localhost:8360/measurement",
    "export": "http://localhost:8360/export",
    "failed": "http://localhost:8360/failed",
    "health": "http://localhost:8360/health",
    "status": "http://localhost:8360/status",
    "self": "http://localhost:8360/"
  }
}
#+end_example

The following methods/endpoints are supported by the exporter.

** The /health endpoint

The =/health= endpoint is used to access basic health information about the service. It only supports =HTTP GET=

The output is as follows:
#+BEGIN_SRC http :pretty :exports both
  GET http://localhost:8360/health
#+END_SRC

#+RESULTS:
: {
:   "apiVersion": "1.0.6_build1",
:   "environment": "dev"
: }

The health checks queries:
- database
- if kih export is selected:
  - Sosiserver for idcard signing
  - KIHDB for export
** The /export endpoint
The =/export= endpoint is used trigger the export. It only supports =HTTP GET=

When the export is started it does as follows:
1. Find time of last run
2. Get measurements from opentele from 30 minutes before time of lastrun
3. For each measurement:
   1. Check if measurement is already known and exported?
   2. Convert measurements to output format
   3. Export measurements
   4. Mark measurement as exported
4. Check if results was paginiation, if yes fetch next batch and perform steps in step 3
5. Mark run as completed

The output is as follows:
#+BEGIN_SRC restclient :pretty :exports both inline-body
GET http://localhost:8360/export
#+END_SRC

#+RESULTS:
#+begin_example
,#+BEGIN_SRC js
[
  {
    "Success": true,
    "Measurement": {
      "id": "d99394ab-2c51-440f-9aa1-4b97e62c8696",
      "measurement": "https://docker-demo.oth.io/clinician/api/patients/14/measurements/397",
      "patient": "https://docker-demo.oth.io/clinician/api/patients/14",
      "status": "COMPLETED",
      "created_at": "2020-02-25T15:58:40+01:00",
      "updated_at": "2020-02-25T15:58:41.361090851+01:00"
    }
  },
  {
    "Success": true,
    "Measurement": {
      "id": "883e39d0-ca2c-4995-9897-53c7b05528eb",
      "measurement": "https://docker-demo.oth.io/clinician/api/patients/13/measurements/396",
      "patient": "https://docker-demo.oth.io/clinician/api/patients/13",
      "status": "COMPLETED",
      "created_at": "2020-02-25T15:58:41+01:00",
      "updated_at": "2020-02-25T15:58:41.729067684+01:00"
    }
  },
]
// GET http://localhost:8360/export
// HTTP/1.1 200 OK
// Content-Type: application/json; charset=utf-8
,#+END_SRC
#+end_example

** The /status endpoint
The =/statuss= endpoint is used to access basic metrics from the underlying service. It only supports =HTTP GET=

The output is as follows:
#+BEGIN_SRC http :pretty :exports both
GET http://localhost:8360/status
#+END_SRC

#+RESULTS:
#+begin_example
{
  "Measurements": {
    "TotalMeasurements": 397,
    "TempFailedMeasurements": 0,
    "RejectedMeasurements": 5,
    "FailedMeasurements": 0
  },
  "LastRun": {
    "TimeStamp": "2020-02-25T16:14:18+01:00",
    "Status": "COMPLETED"
  },
  "Runs": {
    "Total": 2,
    "Failed": 0,
    "Successfull": 2
  },
  "Source": {
    "Endpoint": "https://docker-demo.oth.io/clinician/api"
  },
  "Destination": {
    "Endpoint": "https://kihdb-devel.oth.io/services/monitoringDataset"
  }
}
#+end_example

** The /failed endpoint

The =/failed= endpoint is used to trigger, failed measurements

** The /measurement endpoint

The =/measurement/ endpoint is used to retrieve a measurement using the ID for the measurement. The operations fetches both the exporters internal state, as well as the actual measurement and patient from OTH.

Example:
#+BEGIN_SRC http :pretty :exports both
GET localhost:8360/measurement/7ee1c80c-d687-4c02-9ac4-8a9bc8586111
#+END_SRC

#+RESULTS:
#+begin_example
{
  "patient": {
    "createdDate": "2021-06-25T07:06:37.000Z",
    "uniqueId": "2512688916",
    "username": "Lisa",
    "firstName": "Lisa",
    "lastName": "Jensen",
    "dateOfBirth": null,
    "sex": "female",
    "status": "active",
    "address": "21 Carter Building Washington",
    "postalCode": "DC 20510",
    "city": "Washington DC",
    "place": null,
    "phone": null,
    "mobilePhone": "",
    "email": "",
    "comment": null,
    "patientGroups": [
      {
        "name": "Obstructive Lung Disease Clinic",
        "links": {
          "patientGroup": "https://docker-demo.oth.io/clinician/api/patientgroups/4"
        }
      }
    ],
    "relatives": [],
    "links": {
      "self": "https://docker-demo.oth.io/clinician/api/patients/14",
      "questionnaireSchedules": "https://docker-demo.oth.io/clinician/api/patients/14/questionnaire_schedules",
      "measurements": "https://docker-demo.oth.io/clinician/api/patients/14/measurement-types",
      "questionnaireResults": "https://docker-demo.oth.io/clinician/api/patients/14/questionnaire-results",
      "patientThresholds": ""
    }
  },
  "measurement": {
    "timestamp": "2021-06-02T09:00:00+02:00",
    "type": "bloodsugar",
    "measurement": {
      "unit": "mmol/L",
      "value": 6.900000095367432,
      "ignored": {
        "by": {
          "firstName": "",
          "lastName": "",
          "email": "",
          "links": {}
        }
      }
    },
    "origin": {
      "manualMeasurement": {
        "enteredBy": ""
      },
      "deviceMeasurement": {
        "connectionType": "bluetooth_spp",
        "manufacturer": "MyGlycoHealth",
        "model": "MyGlycoHealth",
        "primaryDeviceIdentifier": {
          "macAddress": "AA:BB:CC:DD:EE:FF"
        },
        "hardwareVersion": "A2",
        "firmwareVersion": "Z3",
        "softwareVersion": "B1",
        "additionalDeviceIdentifiers": [
          {
            "systemId": "123456",
            "other": {
              "description": "",
              "value": ""
            }
          },
          {
            "other": {
              "description": "manufacturer_id",
              "value": "ACF123G155"
            }
          }
        ]
      }
    },
    "links": {
      "patient": "https://docker-demo.oth.io/clinician/api/patients/14"
    }
  },
  "storedMeasurement": {
    "id": "7ee1c80c-d687-4c02-9ac4-8a9bc8586111",
    "measurement": "https://docker-demo.oth.io/clinician/api/patients/14/measurements/279",
    "patient": "https://docker-demo.oth.io/clinician/api/patients/14",
    "status": "COMPLETED",
    "created_at": "2021-05-21T13:58:15+02:00",
    "updated_at": "2021-05-21T13:58:16+02:00"
  }
}
#+end_example

* Exporter Commands
The =exporter= binary has a the following sub commands:
The exporter has the following endpoints:

#+BEGIN_SRC bash :results raw code :exports both
exporter help
#+END_SRC

#+RESULTS:
#+begin_src bash
OTH KIH export application

Usage:
  exporter [flags]
  exporter [command]

Available Commands:
  exportall   Starts export of all old measurements
  help        Help about any command
  migrate     Perform database migrations
  serve       Starts the KIH Export web server
  testinject  Reads measurements and patients from file and exports based on config
  version     Print the version number

Flags:
      --exporter string   config file (default is exporter.yaml)
  -h, --help              help for exporter

Use "exporter [command] --help" for more information about a command.
#+end_src

* Exporter Backends
There is currently implemented two backends
- KIH Database exporter
- OIOXDS exporter

** The KIH Database exporter
The =KIH Database= exporter uses the OIOXML for [[http://svn.medcom.dk/svn/releases/Standarder/Den%20gode%20kronikerservice/]["Den Gode Kroniker Service"]]. The functionality is implemented in the =KihExporter= type. The main bulk of functionality for the =KihExporter= is located in the =kih= package.

The =KihExporter= requires the component [[https://bitbucket.org/opentelehealth/sosiserver/src/master/][=sosiserver=]] to handle [[http://svn.medcom.dk/svn/releases/Standarder/DGWS/][DGWS]] functionality to sign messages.

The flow for the =KihExporter= is depicted below:

#+begin_src plantuml :file images/exporter-kih-overview.png :exports results
title KIH Exporter Overview
hide footbox

box "Exporter Service"
participant Exporter
participant ExporterBackend
end box

participant sosiserver
participant "NSP STS" as sts
participant "KIH Database" as External

Exporter->ExporterBackend: Convert Measurement To Backend Format
activate ExporterBackend
return  Converted Measurement As String

Exporter->ExporterBackend: Export Measurement
activate ExporterBackend

ExporterBackend->sosiserver: Sign Request
activate sosiserver

sosiserver->sosiserver : Get SOSI IDCard
sosiserver->sosiserver: Is IDCard in cache valid?
sosiserver->sts: Get IDCard
activate sts
sts->sts: Issue IDCard
sts-->sosiserver: Return IDCard
deactivate sts
sosiserver->sosiserver: Add IDCard to request
sosiserver-->ExporterBackend:Returns signed request
deactivate sosiserver

ExporterBackend->External: CreateMonitoringDataset SOAP Operation
activate External
External-->ExporterBackend: Measurements stored
deactivate External

return  Measurement Exported

#+end_src

#+RESULTS:
[[file:images/exporter-kih-overview.png]]
** The KIH XDS Repository exporter
The =KIH XDS Repository= exporter uses the OIOXML for [[http://svn.medcom.dk/svn/releases/Standarder/Den%20gode%20kronikerservice/]["Den Gode Kroniker Service"]]. The functionality is implemented in the =OioXdsExporter= type. The main bulk of functionality for the =OioXdsExporter= is located in the =kih= package.

The =OioXdsExporter= requires the component [[https://bitbucket.org/opentelehealth/xds-generator/src/master/][=xds-generator=]] to generate PHMR/CDA/XDS documents from measurement, sign with [[http://svn.medcom.dk/svn/releases/Standarder/DGWS/][DGWS]] if enabled, and submit to the =KIH XDS Repository=.

The flow for the =OioXdsExporter= is depicted below:

#+begin_src plantuml :file images/exporter-oioxds-overview.png :exports results
title KIH Exporter Overview
hide footbox

box "Exporter Service"
participant Exporter
participant ExporterBackend
end box

participant xdsgenerator
participant "NSP STS" as sts
participant "KIH XDS Repository" as External

Exporter->ExporterBackend: Convert Measurement To Backend Format
activate ExporterBackend
return  Converted Measurement As String

Exporter->ExporterBackend: Export Measurement
activate ExporterBackend

ExporterBackend->xdsgenerator: HTTP Post /api/createphmr
activate xdsgenerator

xdsgenerator->xdsgenerator : Create PHMR from Data
xdsgenerator->xdsgenerator : Create CDA from PHMR
xdsgenerator->xdsgenerator : Create XDS Metadata from CDA
xdsgenerator->xdsgenerator: Is IDCard in cache valid?
xdsgenerator->sts: Get IDCard
activate sts
sts->sts: Issue IDCard
sts-->xdsgenerator: Return IDCard
deactivate sts
xdsgenerator->xdsgenerator: Add IDCard to request
xdsgenerator->External: ITI-41 ProvideAndRegisterDocumentSet-b
activate External
External-->xdsgenerator: Document Stored
deactivate External
xdsgenerator-->ExporterBackend:Returns success/failure
deactivate xdsgenerator

return  Measurement Exported

#+end_src

#+RESULTS:
[[file:images/exporter-oioxds-overview.png]]
